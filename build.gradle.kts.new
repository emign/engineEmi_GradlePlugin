import java.io.PrintWriter
import java.net.URL
import java.util.*

buildscript {
    val kotlinVersion: String by project
    repositories {
        maven { url = uri("https://plugins.gradle.org/m2/") }
           mavenCentral()

    }
    dependencies {
        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4")
        classpath("org.jetbrains.dokka:dokka-gradle-plugin:0.10.1")
        classpath("org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:$kotlinVersion")


    }
}




plugins {
    kotlin("jvm") version "1.3.70"
    id("maven-publish")
    id("maven")
    id("org.jetbrains.dokka") version "0.10.1"
    id("java")
    id("java-gradle-plugin")
    id ("com.gradle.plugin-publish") version "0.10.1"
}

apply(plugin = "maven")
apply(plugin = "maven-publish")
apply(plugin = "java-gradle-plugin")


val GROUP_ID: String by project
val ARTIFACT_ID: String by project
val BINTRAY_ORGANIZATION: String by project
val BINTRAY_REPOSITORY: String by project
val pluginVersion: String by project
val engineEmiLibVersion: String by project
val korgeVersion: String by project
val kotlinVersion: String by project

group = GROUP_ID
version = pluginVersion

pluginBundle {
    website = "https://korge.soywiz.com/"
    vcsUrl = "https://github.com/korlibs/korge-plugins"
    tags = listOf("korge", "game", "engine", "game engine", "multiplatform", "kotlin")
}

gradlePlugin {
    plugins {
        create("engineEmi") {
            id = "${GROUP_ID}.${ARTIFACT_ID}"
            displayName = "${ARTIFACT_ID}"
            description = "Didactical Multiplatform Game Engine for Kotlin"
            implementationClass = "me.emig.engineEmi.gradle.EngineEmiGradlePlugin"
        }
    }
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile::class).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}



publishing.apply {
    repositories {
        maven {
            credentials {
                username = "emign"
                password = System.getenv("bintrayApiKey")
            }
            url = uri(
                "https://api.bintray.com/maven/emign/engineEmi/engineEmi/"

            )
        }
    }



    publications {
        create<MavenPublication>("maven").apply {
            pom {
                name.set("engineEmi")
                description.set("Desc")
                url.set("https.:emig.me")
                url.set("https://github.com/emign/engineEmi")
                scm {
                    url.set("https://github.com/emign/engineEmi")
                }
            }
        }
    }
}

fun ByteArray.encodeBase64() = Base64.getEncoder().encodeToString(this)

val release by tasks.creating {
    dependsOn("publishAllPublicationsToMavenRepository")
    group = "publishing"

    doLast {
        val subject = BINTRAY_ORGANIZATION
        val repo = "engineEmi"
        val _package = ARTIFACT_ID
        val version = pluginVersion

        ((URL("https://bintray.com/api/v1/content/$BINTRAY_ORGANIZATION/$BINTRAY_REPOSITORY/$BINTRAY_REPOSITORY/$version/publish")).openConnection() as java.net.HttpURLConnection).apply {

            requestMethod = "POST"
            doOutput = true


            //setRequestProperty("Authorization", "Basic " + "$publishUser:$publishPassword".toByteArray().encodeBase64().toString())
            setRequestProperty(
                "Authorization",
                "Basic " + "emign:${System.getenv("bintrayApiKey")}".toByteArray().encodeBase64().toString()

            )
            PrintWriter(outputStream).use { printWriter ->
                printWriter.write("""{"discard": false, "publish_wait_for_secs": -1}""")
            }
            println(inputStream.readBytes().toString(Charsets.UTF_8))
        }
    }
}
